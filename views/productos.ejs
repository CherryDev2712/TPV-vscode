<!DOCTYPE html>
<%- include('load/head') %>
<body>
    <%- include('load/nav') %>
    <main class="main-container">
        <div class="content">
            <h1>Inventario de Productos</h1>
                  
            <div class="categorias-container" id="categorias">
                <!-- Las categorías con sus productos se agregarán aquí dinámicamente -->
            </div>
        </div>

        <!-- Botón flotante para agregar categorías -->
        <button class="btn btn-dark btn-content" data-bs-toggle="modal" data-bs-target="#categoriaModal">
            <span>
                <i class="bi bi-box-seam"></i>
            </span>
        </button>

        <!-- Botón flotante para agregar productos -->
        <button class="btn btn-primary btn-content" id="btnAgregarProducto" data-bs-toggle="modal" data-bs-target="#productoModal" style="right: 100px;">
            <span>
                <i class="bi bi-basket"></i>
            </span>
        </button>
    </main>

    <!-- Modal para añadir/editar categoría -->
    <div class="modal fade" id="categoriaModal" tabindex="-1" aria-labelledby="categoriaModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="categoriaModalLabel">Añadir Categoría</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="categoriaForm">
                        <input type="hidden" id="categoriaId">
                        <div class="mb-3">
                            <label for="nombreCategoria" class="form-label">Nombre de la categoría</label>
                            <input type="text" class="form-control" id="nombreCategoria" required>
                        </div>
                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-danger" id="btnEliminarCategoria" style="display: none;">Eliminar</button>
                            <button type="submit" class="btn btn-primary">Guardar</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para añadir/editar producto -->
    <div class="modal fade" id="productoModal" tabindex="-1" aria-labelledby="productoModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productoModalLabel">Añadir Producto</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="productoForm">
                        <input type="hidden" id="productoId">
                        <input type="hidden" id="productoCategoriaId">
                        <div class="mb-3">
                            <label for="categoriaProducto" class="form-label">Categoría</label>
                            <select class="form-select" id="categoriaProducto" required>
                                <option value="" selected disabled>Seleccione una categoría</option>
                                <!-- Las opciones se llenarán dinámicamente -->
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="nombreProducto" class="form-label">Nombre del producto</label>
                            <input type="text" class="form-control" id="nombreProducto" required>
                        </div>
                        <div class="mb-3">
                            <label for="precioProducto" class="form-label">Precio</label>
                            <input type="number" class="form-control" id="precioProducto" min="0" step="0.01" required>
                        </div>
                        <div class="mb-3">
                            <label for="imagenProducto" class="form-label">Imagen del producto</label>
                            <input type="file" class="form-control" id="imagenProducto" accept="image/*">
                        </div>
                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-danger" id="btnEliminarProducto" style="display: none;">Eliminar</button>
                            <button type="submit" class="btn btn-primary">Guardar</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>
</html>

<style>
    body {
        margin: 0;
        padding: 0;
        font-family: Arial, sans-serif;
    }
    .main-container {
        padding: 20px;
    }
    .content {
        padding: 20px;
        border-radius: 20px;
        background-color: #f8f9fa;
    }
    .categorias-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-top: 20px;
    }
    .btn-content {
        position: fixed;
        bottom: 30px;
        right: 30px;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        font-size: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }
    .categoria-card {
        width: 100%;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        background: white;
        padding: 15px;
        margin-bottom: 20px;
    }
    .categoria-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }
    .categoria-title {
        font-size: 1.5rem;
        margin: 0;
        color: #333;
    }
    .categoria-actions {
        display: flex;
        gap: 10px;
    }
    .productos-container {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
    }
    .producto-card {
        width: 200px;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        background: white;
        transition: transform 0.2s;
    }
    .producto-card:hover {
        transform: translateY(-5px);
    }
    .producto-img {
        height: 120px;
        width: 100%;
        object-fit: cover;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
    }
    .producto-body {
        padding: 10px;
    }
    .producto-title {
        font-size: 1rem;
        margin-bottom: 5px;
        color: #333;
    }
    .producto-precio {
        color: #28a745;
        font-weight: bold;
        margin-bottom: 10px;
    }
    .producto-actions {
        display: flex;
        justify-content: space-between;
    }
    .btn-edit {
        background-color: #17a2b8;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
    }
    .btn-edit:hover {
        background-color: #138496;
    }
    .btn-delete {
        background-color: #dc3545;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
    }
    .btn-delete:hover {
        background-color: #c82333;
    }
    h1 {
        color: #333;
        margin-bottom: 20px;
    }
</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
    // Elementos principales
    const categoriaForm = document.getElementById("categoriaForm");
    const productoForm = document.getElementById("productoForm");
    const categoriasContainer = document.getElementById("categorias");
    const categoriaModal = new bootstrap.Modal(document.getElementById('categoriaModal'));
    const productoModal = new bootstrap.Modal(document.getElementById('productoModal'));
    const categoriaProductoSelect = document.getElementById("categoriaProducto");
    const btnEliminarCategoria = document.getElementById("btnEliminarCategoria");
    const btnEliminarProducto = document.getElementById("btnEliminarProducto");
    
    // Variables de estado
    let editingCategoria = null;
    let editingProducto = null;

    // Cargar categorías al iniciar
    cargarCategorias();

    // Evento para agregar/editar categoría
    categoriaForm.addEventListener("submit", (event) => {
        event.preventDefault();

        const nombre = document.getElementById("nombreCategoria").value.trim();
        const categoriaId = document.getElementById("categoriaId").value;

        if (!nombre) {
            Swal.fire({
                title: 'Error',
                text: 'Por favor ingresa un nombre para la categoría',
                icon: 'error',
                confirmButtonText: 'Entendido'
            });
            return;
        }

        // Crear/actualizar objeto categoría
        const categoria = {
            id: categoriaId || Date.now(),
            nombre: nombre
        };

        // Guardar en localStorage
        guardarCategoria(categoria);
        
        // Resetear y cerrar modal
        categoriaForm.reset();
        
        // Mostrar notificación de éxito
        const message = categoriaId ? 'Categoría actualizada' : 'Categoría agregada';
        Swal.fire({
            title: '¡Éxito!',
            text: `${message} correctamente`,
            icon: 'success',
            timer: 1500,
            timerProgressBar: true,
            showConfirmButton: false
        });
    });

    // Evento para eliminar categoría
    btnEliminarCategoria.addEventListener("click", () => {
        Swal.fire({
            title: '¿Eliminar categoría?',
            html: `¿Estás seguro de eliminar la categoría <strong>${editingCategoria.nombre}</strong> y todos sus productos?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Sí, eliminar',
            cancelButtonText: 'Cancelar',
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                eliminarCategoria(editingCategoria.id);
                categoriaModal.hide();
                
                Swal.fire({
                    title: '¡Eliminada!',
                    text: 'La categoría y sus productos han sido eliminados',
                    icon: 'success',
                    timer: 1500,
                    timerProgressBar: true
                });
            }
        });
    });

    // Evento para agregar/editar producto
    productoForm.addEventListener("submit", (event) => {
        event.preventDefault();

        const categoriaId = parseInt(document.getElementById("categoriaProducto").value);
        const nombre = document.getElementById("nombreProducto").value.trim();
        const precio = parseFloat(document.getElementById("precioProducto").value);
        const imagenInput = document.getElementById("imagenProducto");
        const productoId = document.getElementById("productoId").value;
        const imagenURL = imagenInput.files.length > 0 ? URL.createObjectURL(imagenInput.files[0]) : 
                        (editingProducto ? editingProducto.imagenURL : "https://via.placeholder.com/150");

        // Validaciones
        if (!nombre) {
            Swal.fire({
                title: 'Error',
                text: 'Por favor ingresa un nombre para el producto',
                icon: 'error',
                confirmButtonText: 'Entendido'
            });
            return;
        }

        if (isNaN(precio) || precio <= 0) {
            Swal.fire({
                title: 'Error',
                text: 'Por favor ingresa un precio válido',
                icon: 'error',
                confirmButtonText: 'Entendido'
            });
            return;
        }

        // Crear objeto producto
        const producto = {
            id: productoId || Date.now(),
            categoriaId: categoriaId,
            nombre: nombre,
            precio: precio.toFixed(2),
            imagenURL: imagenURL
        };

        // Guardar en localStorage
        guardarProducto(producto);
        
        // Resetear y cerrar modal
        productoForm.reset();
        imagenInput.value = '';
        productoModal.hide();
        
        // Mostrar notificación de éxito
        const message = productoId ? 'Producto actualizado' : 'Producto agregado';
        Swal.fire({
            title: '¡Éxito!',
            text: `${message} correctamente`,
            icon: 'success',
            timer: 1500,
            timerProgressBar: true,
            showConfirmButton: false
        });
    });

    // Evento para eliminar producto
    btnEliminarProducto.addEventListener("click", () => {
        Swal.fire({
            title: '¿Eliminar producto?',
            html: `¿Estás seguro de eliminar el producto <strong>${editingProducto.nombre}</strong>?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Sí, eliminar',
            cancelButtonText: 'Cancelar',
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                eliminarProducto(editingProducto.id);
                productoModal.hide();
                
                Swal.fire({
                    title: '¡Eliminado!',
                    text: 'El producto ha sido eliminado',
                    icon: 'success',
                    timer: 1500,
                    timerProgressBar: true
                });
            }
        });
    });

    // Función para guardar categoría
    function guardarCategoria(categoria) {
        let categorias = JSON.parse(localStorage.getItem('categorias')) || [];
        
        // Si es edición, reemplazar
        const index = categorias.findIndex(c => c.id == categoria.id);
        if (index >= 0) {
            categorias[index] = categoria;
        } else {
            categorias.push(categoria);
        }
        
        localStorage.setItem('categorias', JSON.stringify(categorias));
        cargarCategorias();
    }

    // Función para guardar producto
    function guardarProducto(producto) {
        let productos = JSON.parse(localStorage.getItem('productos')) || [];
        
        // Si es edición, reemplazar
        const index = productos.findIndex(p => p.id == producto.id);
        if (index >= 0) {
            productos[index] = producto;
        } else {
            productos.push(producto);
        }
        
        localStorage.setItem('productos', JSON.stringify(productos));
        cargarCategorias();
    }

    // Función para cargar categorías con sus productos
    function cargarCategorias() {
        const categorias = JSON.parse(localStorage.getItem('categorias')) || [];
        const productos = JSON.parse(localStorage.getItem('productos')) || [];
        
        categoriasContainer.innerHTML = '';
        
        if (categorias.length === 0) {
            categoriasContainer.innerHTML = `
                <div class="alert alert-info w-100">
                    No hay categorías creadas. Agrega una categoría para comenzar.
                </div>
            `;
            return;
        }
        
        categorias.forEach(categoria => {
            const categoriaCard = document.createElement("div");
            categoriaCard.classList.add("categoria-card");
            
            // Obtener productos de esta categoría
            const productosCategoria = productos.filter(p => p.categoriaId == categoria.id);
            
            categoriaCard.innerHTML = `
                <div class="categoria-header">
                    <h3 class="categoria-title">${categoria.nombre}</h3>
                    <div class="categoria-actions">
                        <button class="btn-edit" data-id="${categoria.id}">Editar</button>
                        <button class="btn-delete" data-id="${categoria.id}">Eliminar</button>
                    </div>
                </div>
                <div class="productos-container" id="productos-${categoria.id}">
                    ${productosCategoria.length === 0 ? 
                      '<p class="text-muted">No hay productos en esta categoría</p>' : 
                      productosCategoria.map(producto => `
                        <div class="producto-card" data-id="${producto.id}">
                            <img src="${producto.imagenURL}" class="producto-img" alt="${producto.nombre}">
                            <div class="producto-body">
                                <h5 class="producto-title">${producto.nombre}</h5>
                                <div class="producto-precio">$${producto.precio}</div>
                                <div class="producto-actions">
                                    <button class="btn-edit" data-id="${producto.id}">Editar</button>
                                    <button class="btn-delete" data-id="${producto.id}">Eliminar</button>
                                </div>
                            </div>
                        </div>
                      `).join('')}
                </div>
            `;
            
            categoriasContainer.appendChild(categoriaCard);
            
            // Eventos para botones de categoría
            categoriaCard.querySelector('.categoria-actions .btn-edit').addEventListener('click', () => {
                editarCategoria(categoria.id);
            });
            
            categoriaCard.querySelector('.categoria-actions .btn-delete').addEventListener('click', (e) => {
                e.stopPropagation();
                Swal.fire({
                    title: '¿Eliminar categoría?',
                    html: `¿Estás seguro de eliminar la categoría <strong>${categoria.nombre}</strong> y todos sus productos?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Sí, eliminar',
                    cancelButtonText: 'Cancelar',
                    reverseButtons: true
                }).then((result) => {
                    if (result.isConfirmed) {
                        eliminarCategoria(categoria.id);
                        
                        Swal.fire({
                            title: '¡Eliminada!',
                            text: 'La categoría y sus productos han sido eliminados',
                            icon: 'success',
                            timer: 1500,
                            timerProgressBar: true
                        });
                    }
                });
            });
            
            // Eventos para productos
            productosCategoria.forEach(producto => {
                const productoCard = categoriaCard.querySelector(`.producto-card[data-id="${producto.id}"]`);
                
                productoCard.querySelector('.btn-edit').addEventListener('click', (e) => {
                    e.stopPropagation();
                    editarProducto(producto.id);
                });
                
                productoCard.querySelector('.btn-delete').addEventListener('click', (e) => {
                    e.stopPropagation();
                    Swal.fire({
                        title: '¿Eliminar producto?',
                        html: `¿Estás seguro de eliminar el producto <strong>${producto.nombre}</strong>?`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Sí, eliminar',
                        cancelButtonText: 'Cancelar',
                        reverseButtons: true
                    }).then((result) => {
                        if (result.isConfirmed) {
                            eliminarProducto(producto.id);
                            
                            Swal.fire({
                                title: '¡Eliminado!',
                                text: 'El producto ha sido eliminado',
                                icon: 'success',
                                timer: 1500,
                                timerProgressBar: true
                            });
                        }
                    });
                });
            });
        });
        
        // Actualizar select de categorías en el modal de producto
        actualizarSelectCategorias();
    }

    // Función para actualizar el select de categorías
    function actualizarSelectCategorias() {
        const categorias = JSON.parse(localStorage.getItem('categorias')) || [];
        categoriaProductoSelect.innerHTML = '<option value="" selected disabled>Seleccione una categoría</option>';
        
        categorias.forEach(categoria => {
            const option = document.createElement('option');
            option.value = categoria.id;
            option.textContent = categoria.nombre;
            categoriaProductoSelect.appendChild(option);
        });
    }

    // Función para editar categoría
    function editarCategoria(id) {
        const categorias = JSON.parse(localStorage.getItem('categorias')) || [];
        const categoria = categorias.find(c => c.id == id);
        
        if (categoria) {
            editingCategoria = categoria;
            document.getElementById("categoriaModalLabel").textContent = "Editar Categoría";
            document.getElementById("categoriaId").value = categoria.id;
            document.getElementById("nombreCategoria").value = categoria.nombre;
            btnEliminarCategoria.style.display = 'block';
            categoriaModal.show();
        }
    }

    // Función para eliminar categoría
    function eliminarCategoria(id) {
        // Eliminar del localStorage
        let categorias = JSON.parse(localStorage.getItem('categorias')) || [];
        categorias = categorias.filter(categoria => categoria.id != id);
        localStorage.setItem('categorias', JSON.stringify(categorias));
        
        // Eliminar productos asociados
        let productos = JSON.parse(localStorage.getItem('productos')) || [];
        productos = productos.filter(producto => producto.categoriaId != id);
        localStorage.setItem('productos', JSON.stringify(productos));
        
        // Recargar vista
        cargarCategorias();
    }

    // Función para editar producto
    function editarProducto(id) {
        const productos = JSON.parse(localStorage.getItem('productos')) || [];
        const producto = productos.find(p => p.id == id);
        
        if (producto) {
            editingProducto = producto;
            document.getElementById("productoModalLabel").textContent = "Editar Producto";
            document.getElementById("productoId").value = producto.id;
            document.getElementById("productoCategoriaId").value = producto.categoriaId;
            document.getElementById("categoriaProducto").value = producto.categoriaId;
            document.getElementById("nombreProducto").value = producto.nombre;
            document.getElementById("precioProducto").value = producto.precio;
            btnEliminarProducto.style.display = 'block';
            productoModal.show();
        }
    }

    // Función para eliminar producto
    function eliminarProducto(id) {
        // Eliminar del localStorage
        let productos = JSON.parse(localStorage.getItem('productos')) || [];
        productos = productos.filter(producto => producto.id != id);
        localStorage.setItem('productos', JSON.stringify(productos));
        
        // Recargar vista
        cargarCategorias();
    }

    // Mostrar mensaje de bienvenida al cargar
    Swal.fire({
        title: 'Inventario de Productos',
        text: 'Bienvenido al sistema de gestión de inventario',
        icon: 'info',
        timer: 2000,
        timerProgressBar: true,
        showConfirmButton: false
    });
});
</script>